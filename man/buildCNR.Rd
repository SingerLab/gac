% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildCNR.R
\name{buildCNR}
\alias{buildCNR}
\title{Build a CNR bundle (Copy Number, --Rounded)}
\usage{
buildCNR(X, Y, qc, chromInfo, exprs = NULL, gene.index, ...)
}
\arguments{
\item{X}{bin or common segment copy number data.  Can be in `numeric`
or integer form.  By default it will be rounded by roundCNR.}

\item{Y}{phenotype and additional cell-level annotation data nrow(Y)
needs to equal ncol(X).  There is no check for this yet. requires a
`cellID` column}

\item{qc}{cell-level quality control metadata e.g. readcount, median
bins, mapd, qc.status, or any other data that is technical about the
cells. requires a `cellID` column}

\item{chromInfo}{bin chromosome and end position in base pairs.
Needs to match X}

\item{exprs}{slot for expression same-cell (same-sample) gene
expression matrix}

\item{gene.index}{a GRanges generated matrix to link bins to genes}

\item{...}{additional parameters}
}
\description{
A CNR bundle is a `list` composed of six matrices of class data.frame (mostly). The
objective of the CNR is to keep the six matrices syncronized to optimize data
management.  It is kept simple in order to easily pull the necesary information
to generate a ComplexHetamap.   The functions keepCells, excludeCells, addCells, subsetCNR, manipulate the complete bundle.  Whereas addQC, addPheno, and addInfo manipulate, as the name implies, the QC, Y (phenotype), and chromInfo tables.
}
\examples{


data(copynumbers)
data(Y)
data(qc)
data(chromInfo)
data(gene.index)

cnr <- buildCNR(X = copynumbers, Y = pheno, qc = qc, exprs = NULL,
chromInfo = chromInfo, gene.index = gene.index)


class(cnr)

head(cnr$bins[, 1:5])

head(cnr$genes[, 1:5])

HeatmapCNR(cnr)


saveRDS(cnr, file = "cnr.rds")



}
